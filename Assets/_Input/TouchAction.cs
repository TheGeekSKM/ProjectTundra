//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/_Input/TouchAction.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @TouchAction : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @TouchAction()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""TouchAction"",
    ""maps"": [
        {
            ""name"": ""Gameplay"",
            ""id"": ""a7e1a67c-f355-49fa-a397-9e4dcf2f9d8c"",
            ""actions"": [
                {
                    ""name"": ""TouchPosition"",
                    ""type"": ""Value"",
                    ""id"": ""2f6f6ef1-9cd8-46fa-8309-dd35116f714a"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Touch"",
                    ""type"": ""Value"",
                    ""id"": ""5267231b-79c1-45cb-babd-2781952a56e2"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""TapBinding"",
                    ""type"": ""Value"",
                    ""id"": ""86117f86-135e-4e0a-b083-454d8259d7b4"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""TapInteraction"",
                    ""type"": ""Value"",
                    ""id"": ""bf5c3e6b-88dc-4024-94b9-d3b234d3d871"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Swipe"",
                    ""type"": ""Value"",
                    ""id"": ""8072874a-6c13-463a-8f49-8ed23496ff1e"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""c0d22797-f33a-4932-81d6-b42a5cc4d192"",
                    ""path"": ""<Touchscreen>/primaryTouch/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mobile"",
                    ""action"": ""TouchPosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b65fb575-6732-44b3-ba9c-e99148ecf4dd"",
                    ""path"": ""<Touchscreen>/primaryTouch/tap"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mobile"",
                    ""action"": ""TapBinding"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""97f5772f-ca7c-4b43-839f-7d70044c7c3d"",
                    ""path"": ""<Touchscreen>/primaryTouch/press"",
                    ""interactions"": ""Tap"",
                    ""processors"": """",
                    ""groups"": ""Mobile"",
                    ""action"": ""TapInteraction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3c37f852-d321-4775-ba9e-d554356a5418"",
                    ""path"": ""<Touchscreen>/primaryTouch/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mobile"",
                    ""action"": ""Swipe"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ef7b5742-e67e-49f9-a373-04b18bd7af28"",
                    ""path"": ""<Touchscreen>/Press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mobile"",
                    ""action"": ""Touch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Mobile"",
            ""bindingGroup"": ""Mobile"",
            ""devices"": [
                {
                    ""devicePath"": ""<Touchscreen>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // Gameplay
        m_Gameplay = asset.FindActionMap("Gameplay", throwIfNotFound: true);
        m_Gameplay_TouchPosition = m_Gameplay.FindAction("TouchPosition", throwIfNotFound: true);
        m_Gameplay_Touch = m_Gameplay.FindAction("Touch", throwIfNotFound: true);
        m_Gameplay_TapBinding = m_Gameplay.FindAction("TapBinding", throwIfNotFound: true);
        m_Gameplay_TapInteraction = m_Gameplay.FindAction("TapInteraction", throwIfNotFound: true);
        m_Gameplay_Swipe = m_Gameplay.FindAction("Swipe", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Gameplay
    private readonly InputActionMap m_Gameplay;
    private IGameplayActions m_GameplayActionsCallbackInterface;
    private readonly InputAction m_Gameplay_TouchPosition;
    private readonly InputAction m_Gameplay_Touch;
    private readonly InputAction m_Gameplay_TapBinding;
    private readonly InputAction m_Gameplay_TapInteraction;
    private readonly InputAction m_Gameplay_Swipe;
    public struct GameplayActions
    {
        private @TouchAction m_Wrapper;
        public GameplayActions(@TouchAction wrapper) { m_Wrapper = wrapper; }
        public InputAction @TouchPosition => m_Wrapper.m_Gameplay_TouchPosition;
        public InputAction @Touch => m_Wrapper.m_Gameplay_Touch;
        public InputAction @TapBinding => m_Wrapper.m_Gameplay_TapBinding;
        public InputAction @TapInteraction => m_Wrapper.m_Gameplay_TapInteraction;
        public InputAction @Swipe => m_Wrapper.m_Gameplay_Swipe;
        public InputActionMap Get() { return m_Wrapper.m_Gameplay; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GameplayActions set) { return set.Get(); }
        public void SetCallbacks(IGameplayActions instance)
        {
            if (m_Wrapper.m_GameplayActionsCallbackInterface != null)
            {
                @TouchPosition.started -= m_Wrapper.m_GameplayActionsCallbackInterface.OnTouchPosition;
                @TouchPosition.performed -= m_Wrapper.m_GameplayActionsCallbackInterface.OnTouchPosition;
                @TouchPosition.canceled -= m_Wrapper.m_GameplayActionsCallbackInterface.OnTouchPosition;
                @Touch.started -= m_Wrapper.m_GameplayActionsCallbackInterface.OnTouch;
                @Touch.performed -= m_Wrapper.m_GameplayActionsCallbackInterface.OnTouch;
                @Touch.canceled -= m_Wrapper.m_GameplayActionsCallbackInterface.OnTouch;
                @TapBinding.started -= m_Wrapper.m_GameplayActionsCallbackInterface.OnTapBinding;
                @TapBinding.performed -= m_Wrapper.m_GameplayActionsCallbackInterface.OnTapBinding;
                @TapBinding.canceled -= m_Wrapper.m_GameplayActionsCallbackInterface.OnTapBinding;
                @TapInteraction.started -= m_Wrapper.m_GameplayActionsCallbackInterface.OnTapInteraction;
                @TapInteraction.performed -= m_Wrapper.m_GameplayActionsCallbackInterface.OnTapInteraction;
                @TapInteraction.canceled -= m_Wrapper.m_GameplayActionsCallbackInterface.OnTapInteraction;
                @Swipe.started -= m_Wrapper.m_GameplayActionsCallbackInterface.OnSwipe;
                @Swipe.performed -= m_Wrapper.m_GameplayActionsCallbackInterface.OnSwipe;
                @Swipe.canceled -= m_Wrapper.m_GameplayActionsCallbackInterface.OnSwipe;
            }
            m_Wrapper.m_GameplayActionsCallbackInterface = instance;
            if (instance != null)
            {
                @TouchPosition.started += instance.OnTouchPosition;
                @TouchPosition.performed += instance.OnTouchPosition;
                @TouchPosition.canceled += instance.OnTouchPosition;
                @Touch.started += instance.OnTouch;
                @Touch.performed += instance.OnTouch;
                @Touch.canceled += instance.OnTouch;
                @TapBinding.started += instance.OnTapBinding;
                @TapBinding.performed += instance.OnTapBinding;
                @TapBinding.canceled += instance.OnTapBinding;
                @TapInteraction.started += instance.OnTapInteraction;
                @TapInteraction.performed += instance.OnTapInteraction;
                @TapInteraction.canceled += instance.OnTapInteraction;
                @Swipe.started += instance.OnSwipe;
                @Swipe.performed += instance.OnSwipe;
                @Swipe.canceled += instance.OnSwipe;
            }
        }
    }
    public GameplayActions @Gameplay => new GameplayActions(this);
    private int m_MobileSchemeIndex = -1;
    public InputControlScheme MobileScheme
    {
        get
        {
            if (m_MobileSchemeIndex == -1) m_MobileSchemeIndex = asset.FindControlSchemeIndex("Mobile");
            return asset.controlSchemes[m_MobileSchemeIndex];
        }
    }
    public interface IGameplayActions
    {
        void OnTouchPosition(InputAction.CallbackContext context);
        void OnTouch(InputAction.CallbackContext context);
        void OnTapBinding(InputAction.CallbackContext context);
        void OnTapInteraction(InputAction.CallbackContext context);
        void OnSwipe(InputAction.CallbackContext context);
    }
}
